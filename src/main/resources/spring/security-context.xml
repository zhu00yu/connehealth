<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:security="http://www.springframework.org/schema/security"
             xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd

        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
        <constructor-arg value="ThisIsASecretSoChangeMe" />
    </bean>
    <!-- For user check service -->
    <bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl" depends-on="dataSource">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <!--<security:password-encoder ref="passwordEncoder">
                <security:salt-source user-property="username"/>
            </security:password-encoder>-->
        </security:authentication-provider>
    </security:authentication-manager>
    <security:http
            realm="Protected API"
            use-expressions="true"
            auto-config="false"
            create-session="stateless"
            entry-point-ref="unauthorizedEntryPoint"
            authentication-manager-ref="authenticationManager">
        <security:custom-filter ref="authenticationTokenProcessingFilter" position="FORM_LOGIN_FILTER" />

        <security:intercept-url pattern="/rest/user/authenticate" access="permitAll" />
        <security:intercept-url method="OPTIONS" pattern="/rest/**" access="permitAll" />

        <security:intercept-url method="GET" pattern="/rest/master/**" access="permitAll" />
        <security:intercept-url method="PUT" pattern="/rest/master/**" access="hasRole('ROLE_ADMIN')" />
        <security:intercept-url method="POST" pattern="/rest/master/**" access="hasRole('ROLE_ADMIN')" />
        <security:intercept-url method="DELETE" pattern="/rest/master/**" access="hasRole('ROLE_ADMIN')" />

        <security:intercept-url method="GET" pattern="/rest/podcasts/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/podcasts/**" access="hasRole('ROLE_ADMIN')" />
        <security:intercept-url method="POST" pattern="/rest/podcasts/**" access="hasRole('ROLE_ADMIN')" />
        <security:intercept-url method="DELETE" pattern="/rest/podcasts/**" access="hasRole('ROLE_ADMIN')" />

        <security:intercept-url method="GET" pattern="/rest/user-profiles/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/user-profiles/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/user-profiles/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/user-profiles/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/practices/options/**" access="permitAll" />
        <security:intercept-url method="GET" pattern="/rest/practices/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/practices/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/practices/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/practices/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/practice-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/practice-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/practice-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/practice-files/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/providers/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/providers/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/providers/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/providers/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/employees/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/employees/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/employees/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/employees/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/patients/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/patients/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/patients/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/patients/**" access="hasRole('ROLE_USER')" />

        <security:intercept-url method="GET" pattern="/rest/patient-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="PUT" pattern="/rest/patient-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="POST" pattern="/rest/patient-files/**" access="hasRole('ROLE_USER')" />
        <security:intercept-url method="DELETE" pattern="/rest/patient-files/**" access="hasRole('ROLE_USER')" />
    </security:http>
    <bean id="unauthorizedEntryPoint" class="com.connehealth.security.UnauthorizedEntryPoint" />

    <bean id="authenticationTokenProcessingFilter" class="com.connehealth.security.AuthenticationTokenProcessingFilter">
        <constructor-arg ref="userDetailsService" />
        <property name="userDao" ref="userDao"/>
    </bean>


    <!-- Stateless RESTful services use BASIC authentication
    <security:http create-session="stateless" pattern="/**">
        <security:intercept-url pattern="/**" access="ROLE_REST"/>
        <security:remember-me key="connehealthWebApi" token-validity-seconds="3600" data-source-ref="dataSource"/>
        <security:http-basic/>
    </security:http>

    <security:authentication-manager  alias="authenticationManager">
        <security:authentication-provider>
            <security:user-service>
                <security:user name="rest" password="rest" authorities="ROLE_REST"/>
            </security:user-service>
        </security:authentication-provider>
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder hash="md5">
                <security:salt-source user-property="username"/>
            </security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
    -->

    <!-- For user management CRUD -->
    <!--<beans:bean id="userDetailsManager"
                class="org.springframework.security.provisioning.JdbcUserDetailsManager">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="authenticationManager" ref="authenticationManager"/>
    </beans:bean>-->

</beans>